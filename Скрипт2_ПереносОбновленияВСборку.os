//***************************************************************
// ПОДКЛЮЧАЕМЫЕ БИБЛИОТЕКИ

#Использовать json
// Логирование
#Использовать TLog
// Запуск 1С
#Использовать TRun1C
// Электронная почта 
#Использовать TMail 


//***************************************************************
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Перем СтруктураПараметровЗапускаСборка, СтруктураПараметровЗапускаРазработачная, СтруктураПараметров; 
Перем УправлениеЭП;

Процедура ПрочитатьПараметрыРекурсивно(Параметры, СтруктураЗначений = "")

	Для Каждого Параметр Из Параметры Цикл
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура")			
			ИЛИ ТипЗнч(Параметр.Значение) = Тип("Соответствие") Тогда
			
			Если Параметр.Ключ = "НастройкиSMTP" Тогда
				ТекСтруктура = "НастройкиSMTP";
				СтруктураЗначений = УправлениеЭП.УчетнаяЗаписьЭП;
			ИначеЕсли Параметр.Ключ = "ПолучателиСообщений" Тогда
				ТекСтруктура = "ПолучателиСообщений";
				СтруктураЗначений = УправлениеЭП.СтруктураСообщения;
			ИначеЕсли Параметр.Ключ = "Сборка" Тогда
				ТекСтруктура = "Сборка";			
				СтруктураЗначений = СтруктураПараметровЗапускаСборка;				
			ИначеЕсли Параметр.Ключ = "Разработочная" Тогда
				ТекСтруктура = "Разработочная";
				СтруктураЗначений = СтруктураПараметровЗапускаРазработачная;				
			ИначеЕсли Параметр.Ключ = "Параметры" Тогда
				ТекСтруктура = "Параметры";
				СтруктураЗначений = СтруктураПараметров;								
			КонецЕсли;
			ПрочитатьПараметрыРекурсивно(Параметр.Значение, СтруктураЗначений);
		Иначе			
			СтруктураЗначений[Параметр.Ключ] = Параметр.Значение;						
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗавершитьРаботуСПаузой();
	
	Сообщить("Для продолжения нажмите любую клавишу...");
	Консоль = Новый Консоль();
	ОбщееОжидание = 0;
	Пока Не Консоль.НажатаКлавиша И ОбщееОжидание < 60000 Цикл
		Приостановить(100);
		ОбщееОжидание = ОбщееОжидание + 100;
	КонецЦикла;
	ЗавершитьРаботу(1);

КонецПроцедуры

Функция ОбеспечитьКаталог(Знач Путь, ТекстОшибки="") Экспорт
    
	// Создадим путь к каталогу приемнику
	Файл = Новый Файл(Путь);
    Если Не Файл.Существует() Тогда
       
	   СоздатьКаталог(Путь);
		
		// Проверим, что все получилось
		Файл = Новый Файл(Путь);
		Если Не файл.Существует() Тогда
			ТекстОшибки = " Не удалось создать каталог " + Путь;
			Возврат Ложь;
		КонецЕсли;
		
    ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ТекстОшибки = "Не удается создать каталог " + Путь + ". По данному пути уже существует файл.";
		Возврат Ложь;
    КонецЕсли;
	
	Возврат Истина;
    
КонецФункции

Функция СкопироватьФайл(ПолноеИмяФайлаИсточника, Знач ИмяКаталогаПриемника="", ИмяФайлаПриемника="", ТекстОшибки="") Экспорт

	Файл = Новый Файл(ПолноеИмяФайлаИсточника);
	Если Не Файл.Существует() Тогда
		ТекстОшибки = "Не найден файл по пути: " + ПолноеИмяФайлаИсточника;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяФайлаПриемника = "" Тогда
		ИмяФайлаПриемника = Файл.Имя;
	КонецЕсли;

	Если ИмяКаталогаПриемника = "" Тогда
		ИмяКаталогаПриемника = КаталогВременныхФайлов();
	КонецЕсли;

	ИмяСкопированногоФайла = ОбъединитьПути(ИмяКаталогаПриемника,ИмяФайлаПриемника);
	КопироватьФайл(ПолноеИмяФайлаИсточника,ИмяСкопированногоФайла);
	
	Возврат ИмяСкопированногоФайла;

КонецФункции


//***************************************************************
// НАСТРАИВАЕМЫЕ ПАРАМЕТРЫ

//***************************************************************
// ЛОГИРОВАНИЕ
ИдентификаторЗадания = "Обновлятор1_ПереносОбновленияВСборку";
КаталогХраненияЛогов = ТекущийСценарий().Каталог + "\_Logs\";
ХранитьЛогиДней = 365;
Логирование = Новый ТУправлениеЛогированием(); //TLog
Логирование.ДатаВремяВКаждойСтроке = Истина;
Логирование.СоздатьФайлЛога(ИдентификаторЗадания,КаталогХраненияЛогов);

//***************************************************************
// ПОЛУЧИМ ПАРАМЕТРЫ ПОДКЛЮЧЕНИЯ ИЗ ФАЙЛА НАСТРОЕК

// Попробуем найти файл настроек и рабочую папку "Файлы" в текущем каталоге
Логирование.ЗаписатьСтрокуЛога("Проверка файла настроек");
ПутьКФайлуНастроек = ОбъединитьПути(ТекущийСценарий().Каталог,"Obnovlyator_Params.json");
Файл = Новый Файл(ПутьКФайлуНастроек);
Если Не файл.Существует() Тогда
	Логирование.ЗаписатьСтрокуЛога("Не найден файл настроек по пути: " + ПутьКФайлуНастроек);
	ЗавершитьРаботуСПаузой();
КонецЕсли;
ПутьКФайлам =  ТекущийСценарий().Каталог + "\Files\";
ТекстОшибки = "";
Если НЕ ОбеспечитьКаталог(ПутьКФайлам, ТекстОшибки) Тогда
	Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + ТекстОшибки);
	ЗавершитьРаботуСПаузой();
КонецЕсли;

// Создание объектов 
Запуск1С 			= Новый ТУправлениеЗапуском1С();
ПараметрыЗапуска 	= Запуск1С.ПараметрыЗапуска;
СтруктураПараметровЗапускаСборка 		= Запуск1С.СоздатьСтруктуруПраметровЗапуска();
СтруктураПараметровЗапускаРазработачная = Запуск1С.СоздатьСтруктуруПраметровЗапуска();
УправлениеЭП 		= Новый ТУправлениеЭлектроннойПочтой();

// Чтение настроек
СтруктураПараметров = Новый Структура;
СтруктураПараметров.Вставить("ФайлНовойКонфигурацииПоставщика","");
СтруктураПараметров.Вставить("ФайлОтчетИзмененныеОбъектыРазработочной","");
СтруктураПараметров.Вставить("ФайлОтчетИзмененныеОбъектыПоставщиком","");
СтруктураПараметров.Вставить("ФайлОбновленнойРазработочнойКонфигурации","");
СтруктураПараметров.Вставить("ФайлСпискаОбъектовИзмененныхПоставщиком","");
СтруктураПараметров.Вставить("НаименованиеКонфигурации","");

// Обработаем файлы настроек
Попытка
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуНастроек, КодировкаТекста.UTF8);
	ТекстФайлаНастроек = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Логирование.ЗаписатьСтрокуЛога("Прочитан файл настроек: " + Файл.ПолноеИмя);
	ЧтениеJSON = Новый ПарсерJSON;
	ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайлаНастроек,,,Истина);
	ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла);
Исключение
	Логирование.ЗаписатьСтрокуЛога(ОписаниеОшибки());
	ЗавершитьРаботуСПаузой();
КонецПопытки;

//Путь к рабочему каталогу и к новой конфигурации поставщика
ПутьКНовойКонфигурацииПоставщика = ПутьКФайлам + СтруктураПараметров["ФайлНовойКонфигурацииПоставщика"];// + "\ЗУПНовыйРелиз.cf";
Файл = Новый Файл(ПутьКНовойКонфигурацииПоставщика);
Если Не файл.Существует() Тогда
	Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не обнаружен файл конфигурации поставщика по пути " + ПутьКНовойКонфигурацииПоставщика);
	ЗавершитьРаботуСПаузой();
КонецЕсли;

//Темы сообщений
СИ = Новый СистемнаяИнформация();
ТемаСообщенияПриОшибке = "ВНИМАНИЕ! Задание """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера + " завершено с ошибками";
ТемаСообщенияПриУспехе = "Успешное выполнение задания """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера;
БылиОшибки = Ложь;


//***************************************************************
// ТЕЛО СКРИПТА

// Сделаем записть о начале выполнения задания
Логирование.ЗаписатьСтрокуЛога("Начало выполнения задания """ + ИдентификаторЗадания + """");
Логирование.УвеличитьУровень();
Логирование.ЗаписатьСтрокуЛога("");

// Обновление разработочной из хранилища
Если Не БылиОшибки Тогда
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаРазработачная);
	Логирование.ЗаписатьСтрокуЛога("Попытка обновить разработочную базу из хранилища, база " + ПараметрыЗапуска.ИмяБазы + ".");
	Если Не БылиОшибки И Запуск1С.ОбновитьКонфигурациюИзХранилища(, Истина) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

// Сравнение текущей разработочной конфигурации, в которой проходило обновление, с разработочной конфигурацией сохраненной на момент сразу после обновления, для выявления объектов измененных в период тестирования релиза.
Если Не БылиОшибки Тогда
	
	ФайлОтчетаИзмененныхОбъектовДоп = ПутьКФайлам + "\ОтчетИзмененныеОбъектыВПериодТестирования.txt";
	ТипПервойКонфигурации = "MainConfiguration";
	ТипВторойКонфигурации = "File";
	ДопКлючВторойКонфигурации = ПутьКФайлам + СтруктураПараметров["ФайлОбновленнойРазработочнойКонфигурации"];
	ФайлСпискаОбъектов = Неопределено;

	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаРазработачная);
	Логирование.ЗаписатьСтрокуЛога("Попытка получить список объектов измененных в период тестирования.");
	Если Запуск1С.СравнитьКонфигурации(ФайлОтчетаИзмененныхОбъектовДоп, ТипПервойКонфигурации, ТипВторойКонфигурации,,ДопКлючВторойКонфигурации) = Ложь Тогда		
		БылиОшибки = Истина;		
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
	Иначе		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	КонецЕсли;

КонецЕсли;
	
// формируем таблицы значений на основании отчетов по измененным объектам.
Если Не БылиОшибки Тогда
	
	тзОбъектыИзмененные = Запуск1С.ПолучитьТЗОбъектовИзОтчетаСравнения(ПутьКФайлам + СтруктураПараметров["ФайлОтчетИзмененныеОбъектыРазработочной"]);	
	тзОбъектыИзмененныеПоставщиком = Запуск1С.ПолучитьТЗОбъектовИзОтчетаСравнения(ПутьКФайлам + СтруктураПараметров["ФайлОтчетИзмененныеОбъектыПоставщиком"]);
	тзОбъектыИзмененныеДоп = Запуск1С.ПолучитьТЗОбъектовИзОтчетаСравнения(ФайлОтчетаИзмененныхОбъектовДоп);

	Для Каждого СтрокаТЗ Из тзОбъектыИзмененныеДоп Цикл 
		ЗаполнитьЗначенияСвойств(тзОбъектыИзмененные.Добавить(), СтрокаТЗ); 
	КонецЦикла; 

	Текст = Новый ТекстовыйДокумент();		
	Для каждого СтрокаПоставщика Из тзОбъектыИзмененныеПоставщиком Цикл
		Для каждого Строка Из тзОбъектыИзмененные Цикл			
			Если СтрокаПоставщика.Объект = Строка.Объект Тогда
				//Сообщить("Объект " + СтрокаПоставщика.Объект + ", тип изменения - """ + СтрокаПоставщика.ТипИзменения + """");
				Текст.ДобавитьСтроку(Строка.Объект);	
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	Если Текст.КоличествоСтрок() > 0 Тогда
		Текст.Записать(ПутьКФайлам + "\ОтчетКофликтующиеОбъекты.txt");
		Логирование.ЗаписатьСтрокуЛога("Внимание!Есть конфликтующие объекты! Список объектов сохранен в файле " + ПутьКФайлам + "\ОтчетКонфликтующиеОбъекты.txt");	
	КонецЕсли;

КонецЕсли;

// Обновление сборки из хранилища
Если Не БылиОшибки Тогда
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаСборка);
	Логирование.ЗаписатьСтрокуЛога("Попытка обновить сборку из хранилища, база " + ПараметрыЗапуска.ИмяБазы + ".");
	Если Запуск1С.ОбновитьКонфигурациюИзХранилища(, Истина) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

// Захват объектов в хранилище из списка измененных поставщиком
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка захвата объектов в хранилище сборке из списка измененных поставщиком.");
	ПутьКФайлуСпискаОбъектов = ПутьКФайлам + СтруктураПараметров["ФайлСпискаОбъектовИзмененныхПоставщиком"];
	Если Не БылиОшибки И Запуск1С.ЗахватитьВХранилище(ПутьКФайлуСпискаОбъектов) Тогда		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");	
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

//Создадим файл настроек объединения, где не выбран ни один объект, для обновления конфигурации поставщика.
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка создать файл настроек объединения.");
	ФайлНастроекОбъединения = Запуск1С.СоздатьФайлНастроекОбъединения(ПутьКФайлам, СтруктураПараметров["НаименованиеКонфигурации"]);
	Если ФайлНастроекОбъединения = Неопределено Тогда
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	Иначе
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	КонецЕсли;
КонецЕсли;

//Обновим конфигурацию поставщика.
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка обновить конфигурацию поставщика в Сборке, база " + ПараметрыЗапуска.ИмяБазы + ".");	
	ФайлДваждыИзмененныеОбъекты = ПутьКФайлам + "ДваждыИзмененные2.txt";
	Если Запуск1С.ОбновитьКонфигурациюИзФайлаКонфигурацииПоставщика(ПутьКНовойКонфигурацииПоставщика, ФайлНастроекОбъединения) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);			
		БылиОшибки = Истина;	
	КонецЕсли;
КонецЕсли;

//Откроем конфигуратор
Если Не БылиОшибки Тогда
	Запуск1С.ЗапуститьКонфигуратор();
КонецЕсли;

// Сделаем записть о завершении выполнения основного задания
Логирование.ЗаписатьСтрокуЛога();
Логирование.ЗаписатьСтрокуЛога("Результат выполнения задания: " + ?(БылиОшибки,"БЫЛИ ОШИБКИ","УСПЕШНОЕ ВЫПОЛНЕНИЕ"));
Логирование.ЗаписатьСтрокуЛога();
Логирование.УменьшитьУровень();
Логирование.ЗаписатьСтрокуЛога("Завершение выполнения задания """ + ИдентификаторЗадания + """", -1);

// Отправляем эклектронное сообщение с файлом лога во вложении
Если ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	Если БылиОшибки Тогда
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриОшибке;
	Иначе
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриУспехе;
	КонецЕсли;	
	СтруктураСообщения.ТекстСообщения = СтруктураСообщения.ТемаСообщения;
	
	// Часть имеющегося лога добавим в письмо
	ИмяВременногоФайла = СкопироватьФайл(Логирование.ИмяФайлаЛога);
	СтруктураСообщения.Вложения = ИмяВременногоФайла;
	
	// Отправим сообщение
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.ЗаписатьСтрокуЛога("Попытка отправки электронного сообщения:");
	КопироватьФайл(Логирование.ИмяФайлаЛога,ПолучитьИмяВременногоФайла("txt"));
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		Логирование.ЗаписатьСтрокуЛога("Отправлено электорнное сообщение на адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя);
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось отправить электронное сообщение с smtp-сервера: " + УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP);
		Логирование.ЗаписатьСтрокуЛога("	по причине " + УправлениеЭП.ТекстОшибки);
		БылиОшибки = Истина;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецЕсли;

Если БылиОшибки Тогда
	ЗавершитьРаботуСПаузой();
КонецЕсли;
