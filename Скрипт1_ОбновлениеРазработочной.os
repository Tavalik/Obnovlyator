//***************************************************************
// ПОДКЛЮЧАЕМЫЕ БИБЛИОТЕКИ

#Использовать json
// Логирование
#Использовать Tlib\TLog
// Запуск 1С
#Использовать Tlib\TRun1C
// Файловые операции
#Использовать Tlib\TFile
// Электронная почта 
#Использовать Tlib\TMail 


//***************************************************************
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Перем СтруктураПараметровЗапускаСборка, СтруктураПараметровЗапускаРазработачная, СтруктураПараметров; 
Перем УправлениеЭП;

Процедура ПрочитатьПараметрыРекурсивно(Параметры, СтруктураЗначений = "")
	Для Каждого Параметр Из Параметры Цикл
		
		Если ТипЗнч(Параметр.Значение) = Тип("Структура")			
			ИЛИ ТипЗнч(Параметр.Значение) = Тип("Соответствие") Тогда
			
			Если Параметр.Ключ = "НастройкиSMTP" Тогда
				ТекСтруктура = "НастройкиSMTP";
				СтруктураЗначений = УправлениеЭП.УчетнаяЗаписьЭП;
			ИначеЕсли Параметр.Ключ = "ПолучателиСообщений" Тогда
				ТекСтруктура = "ПолучателиСообщений";
				СтруктураЗначений = УправлениеЭП.СтруктураСообщения;
			ИначеЕсли Параметр.Ключ = "Сборка" Тогда
				ТекСтруктура = "Сборка";			
				СтруктураЗначений = СтруктураПараметровЗапускаСборка;				
			ИначеЕсли Параметр.Ключ = "Разработочная" Тогда
				ТекСтруктура = "Разработочная";
				СтруктураЗначений = СтруктураПараметровЗапускаРазработачная;				
			ИначеЕсли Параметр.Ключ = "Параметры" Тогда
				ТекСтруктура = "Параметры";
				СтруктураЗначений = СтруктураПараметров;								
			КонецЕсли;
			ПрочитатьПараметрыРекурсивно(Параметр.Значение, СтруктураЗначений);
		Иначе			
			СтруктураЗначений[Параметр.Ключ] = Параметр.Значение;						
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек)

	Попытка
		ЗаписьТекста = Новый ЗаписьТекста();
		ЗаписьТекста.Открыть(ПутьКФайлуНастроек,КодировкаТекста.UTF8);
		ЗаписьТекста.ЗаписатьСтроку("
		|	{
		|		""ПараметрыОбновлятора"":
		|		{
		|			""Сборка"": 	
		|			{
		|				""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.10.2168\\bin\\1cv8.exe"",
		|				""ТипБазы"" : 							""F"",														 
		|				""ВерсияПлатформы"" :						""83"",
		|				""ИмяБазы"" : 							""C:\\1СBD\\Sborka"",
		|				""АдресКластера"" : 						"""",
		|				""ПортКластера"" : 						"""",
		|				""ПортАгента"" :							"""",
		|				""ИмяПользователя"" : 					""Администратор"",
		|				""ПарольПользователя"" :					"""",
		|				""АдресХранилища"" :						""C:\\1СBD\\ProdStorage"",
		|				""ИмяПользователяХранилища"" : 			""Sborka"",
		|				""ПарольПользователяХранилища"" : 		""1""
		|			},
		|	
		|			""Разработочная"":	
		|			{
		|				""ПутьКПлатформе1С"" : 					""C:\\Program Files (x86)\\1cv8\\8.3.10.2168\\bin\\1cv8.exe"",
		|				""ТипБазы"" : 							""F"",
		|				""ВерсияПлатформы"" :						""83"",
		|				""ИмяБазы"" : 							""C:\\1СBD\\Dev1"",
		|				""АдресКластера"" : 						"""",
		|				""ПортКластера"" : 						"""",
		|				""ПортАгента"" :							"""",
		|				""ИмяПользователя"" : 					""Администратор"",
		|				""ПарольПользователя"" :					"""",
		|				""АдресХранилища"" :						""C:\\1СBD\\DevStorage"",
		|				""ИмяПользователяХранилища"" : 			""Dev1"",
		|				""ПарольПользователяХранилища"" : 		""1""
		|			},
		|	
		|			""Параметры"":	
		|			{
		|				""ФайлНовойКонфигурацииПоставщика"" :			""НовыйРелиз.cf"", 
		|				""ФайлОтчетИзмененныеОбъектыРазработочной"":	""ОтчетИзмененныеОбъектыВРазработочной.txt"",
		|				""ФайлОтчетИзмененныеОбъектыПоставщиком"":	""ОтчетИзмененныеОбъектыПоставщиком.txt"",
		|				""ФайлОбновленнойРазработочнойКонфигурации"":	""РазработочнаяНовыйРелиз.cf"",
		|				""ФайлСпискаОбъектовИзмененныхПоставщиком"":	""СписокОбъектовИзмененныхПоставщиком.xml"",
		|				""НаименованиеКонфигурации"":					""ЗарплатаИУправлениеПерсоналомКОРП""
		|			}
		|		},
		|		
		|		""ЭлектроннаяПочта"": 
		|		{
		|			""НастройкиSMTP"":
		|			{
		|				""АдресSMTP"" : 							""smtp.ya.ru"",
		|				""ПортSMTP"" : 							465,
		|				""ПользовательSMTP"" : 					""ВашаПочта@yandex.ru"",
		|				""ПарольSMTP"" : 							""ВашПароль"",
		|				""ИспользоватьSSL"" : 					true
		|			},
		|			""ПолучателиСообщений"":
		|			{
		|				""АдресЭлектроннойПочтыПолучателя"" : 	""ВашаПочта1@fto.com.ru; ВашаПочта2@fto.com.ru""
		|			}
		|		}	
		|	}
		|");	
			ЗаписьТекста.Закрыть();
	Исключение
		Возврат Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

Процедура ЗавершитьРаботуСПаузой();
	Сообщить("Для продолжения нажмите любую клавишу...");
	Консоль = Новый Консоль();
	ОбщееОжидание = 0;
	Пока Не Консоль.НажатаКлавиша И ОбщееОжидание < 60000 Цикл
		Приостановить(100);
		ОбщееОжидание = ОбщееОжидание + 100;
	КонецЦикла;
	ЗавершитьРаботу(1);
КонецПроцедуры


//***************************************************************
// НАСТРАИВАЕМЫЕ ПАРАМЕТРЫ

//***************************************************************
// ЛОГИРОВАНИЕ
ИдентификаторЗадания = "Обновлятор1_ОбновлениеРазработочной";
КаталогХраненияЛогов = ТекущийСценарий().Каталог + "\_Logs\";
ХранитьЛогиДней = 365;
Логирование = Новый ТУправлениеЛогированием(); //TLog
Логирование.ДатаВремяВКаждойСтроке = Истина;
Логирование.СоздатьФайлЛога(ИдентификаторЗадания,КаталогХраненияЛогов);

//***************************************************************
// ПОЛУЧИМ ПАРАМЕТРЫ ПОДКЛЮЧЕНИЯ ИЗ ФАЙЛА НАСТРОЕК

// Попробуем найти файл настроек и рабочую папку "Файлы" в текущем каталоге
Логирование.ЗаписатьСтрокуЛога("Проверка файла настроек");
ПутьКФайлуНастроек = ОбъединитьПути(ТекущийСценарий().Каталог,"Obnovlyator_Params.json");
Файл = Новый Файл(ПутьКФайлуНастроек);
Если Не файл.Существует() Тогда	
	Логирование.ЗаписатьСтрокуЛога("Не найден файл настроек по пути: " + ПутьКФайлуНастроек);
	Если СоздатьШаблонФайлаНастроек(ПутьКФайлуНастроек) Тогда		
		Логирование.ЗаписатьСтрокуЛога("Создан шаблон файла настроек Obnovlyator_Params.json. Заполните файл и перезапустите программу.");
		ЗавершитьРаботуСПаузой();
	Иначе
		ЗавершитьРаботуСПаузой();
	КонецЕсли;
КонецЕсли;
ПутьКФайлам =  ТекущийСценарий().Каталог + "\Files\";
Если НЕ ТФайловыеОперации.ОбеспечитьКаталог(ПутьКФайлам) Тогда
	Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + ТФайловыеОперации.ТекстОшибки);
	ЗавершитьРаботуСПаузой();
КонецЕсли;

// Создание объектов 
Запуск1С 			= Новый ТУправлениеЗапуском1С();
ПараметрыЗапуска 						= Запуск1С.ПараметрыЗапуска;
СтруктураПараметровЗапускаСборка 		= Запуск1С.СоздатьСтруктуруПраметровЗапуска();
СтруктураПараметровЗапускаРазработачная = Запуск1С.СоздатьСтруктуруПраметровЗапуска();
УправлениеЭП 		= Новый ТУправлениеЭлектроннойПочтой();
ФайловыеОперации 	= Новый ТУправлениеФайловымиОперациями(); 

// Чтение настроек
СтруктураПараметров = Новый Структура;
СтруктураПараметров.Вставить("ФайлНовойКонфигурацииПоставщика","");
СтруктураПараметров.Вставить("ФайлОтчетИзмененныеОбъектыРазработочной","");
СтруктураПараметров.Вставить("ФайлОтчетИзмененныеОбъектыПоставщиком","");
СтруктураПараметров.Вставить("ФайлОбновленнойРазработочнойКонфигурации","");
СтруктураПараметров.Вставить("ФайлСпискаОбъектовИзмененныхПоставщиком","");
СтруктураПараметров.Вставить("НаименованиеКонфигурации","");

// Обработаем файлы настроек
Попытка
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуНастроек, КодировкаТекста.UTF8);
	ТекстФайлаНастроек = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Сообщить("Прочитан файл настроек: " + Файл.ПолноеИмя);
	ЧтениеJSON = Новый ПарсерJSON;
	ПараметрыИзФайла = ЧтениеJSON.ПрочитатьJSON(ТекстФайлаНастроек,,,Истина);
	ПрочитатьПараметрыРекурсивно(ПараметрыИзФайла);
Исключение
	Сообщить(ОписаниеОшибки());
	ЗавершитьРаботуСПаузой();
КонецПопытки;

//Путь к рабочему каталогу и к новой конфигурации поставщика
ПутьКНовойКонфигурацииПоставщика = ПутьКФайлам + СтруктураПараметров["ФайлНовойКонфигурацииПоставщика"];
Файл = Новый Файл(ПутьКНовойКонфигурацииПоставщика);
Если Не файл.Существует() Тогда
	Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не обнаружен файл конфигурации поставщика по пути " + ПутьКНовойКонфигурацииПоставщика);
	ЗавершитьРаботуСПаузой();
КонецЕсли;

//Темы сообщений
СИ = Новый СистемнаяИнформация();
ТемаСообщенияПриОшибке = "ВНИМАНИЕ! Задание """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера + " завершено с ошибками";
ТемаСообщенияПриУспехе = "Успешное выполнение задания """ + ИдентификаторЗадания + """ на сервере " + СИ.ИмяКомпьютера;
БылиОшибки = Ложь;


//***************************************************************
// ТЕЛО СКРИПТА

// Сделаем записть о начале выполнения задания
Логирование.ЗаписатьСтрокуЛога("Начало выполнения задания """ + ИдентификаторЗадания + """");
Логирование.УвеличитьУровень();
Логирование.ЗаписатьСтрокуЛога("");

// Обновление сборки из хранилища
Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаСборка);
Логирование.ЗаписатьСтрокуЛога("Попытка обновить сборку из хранилища, база " + ПараметрыЗапуска.ИмяБазы + ".");
Если Запуск1С.ОбновитьКонфигурациюИзХранилища(, Истина) Тогда
	Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
Иначе
	Логирование.ЗаписатьСтрокуЛога("Не удалось обновить сборку из хранилища!");		
	БылиОшибки = Истина;
КонецЕсли;

// Обновление разработочной из хранилища
Если Не БылиОшибки Тогда
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаРазработачная);
	Логирование.ЗаписатьСтрокуЛога("Попытка обновить разработочную базу из хранилища, база " + ПараметрыЗапуска.ИмяБазы + ".");
	Если Запуск1С.ОбновитьКонфигурациюИзХранилища(, Истина) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("Не удалось обновить разработачну из хранилища!");		
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

// сохранение конфигураций разработочной базы в файл
Если Не БылиОшибки Тогда
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаРазработачная);
	Логирование.ЗаписатьСтрокуЛога("Попытка сохранить конфигурацию разработочной базы в файл.");
	ПутьКФайлуКонфигурацииРазработочной = ПутьКФайлам + "Разработочная_" + Год(ТекущаяДата()) +"-"+ Месяц(ТекущаяДата()) +"-"+ День(ТекущаяДата()) +"_"+ Час(ТекущаяДата()) +"-"+ Минута(ТекущаяДата()) +"-"+ Секунда(ТекущаяДата()) + ".cf";
	Если Запуск1С.СохранитьКонфигурациюВФайл(ПутьКФайлуКонфигурацииРазработочной) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

// Сравнение конфигурации Сборки с разработочной конфигурацией для выявления измененных объектов
Если Не БылиОшибки Тогда
	
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаСборка);
	ФайлОтчета = ПутьКФайлам + СтруктураПараметров["ФайлОтчетИзмененныеОбъектыРазработочной"];
	ТипПервойКонфигурации = "MainConfiguration";
	ТипВторойКонфигурации = "File";
	ДопКлючВторойКонфигурации =ПутьКФайлуКонфигурацииРазработочной;
	ФайлСпискаОбъектов = Неопределено;
	
	Логирование.ЗаписатьСтрокуЛога("Попытка получить список измененных объектов не перенесенных в сборку!");
	Если Запуск1С.СравнитьКонфигурации(ФайлОтчета, ТипПервойКонфигурации, ТипВторойКонфигурации,,ДопКлючВторойКонфигурации) = Ложь Тогда		
			БылиОшибки = Истина;		
			Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		Иначе		
			Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	КонецЕсли;

КонецЕсли;

// Сравнение разработочной конфигурации поставщика с новой конфигурацией поставщика для выявления измененных объектов поставщиком
Если Не БылиОшибки Тогда	
	
	Запуск1С.УстановитьПараметрыЗапуска(СтруктураПараметровЗапускаРазработачная);
	ФайлОтчета = ПутьКФайлам + СтруктураПараметров["ФайлОтчетИзмененныеОбъектыПоставщиком"];
	ТипПервойКонфигурации = "VendorConfiguration";
	ДопКлючПервойКонфигурации = СтруктураПараметров["НаименованиеКонфигурации"];
	ТипВторойКонфигурации = "File";
	ДопКлючВторойКонфигурации =ПутьКНовойКонфигурацииПоставщика;
	ФайлСпискаОбъектов = Неопределено;
	
	Логирование.ЗаписатьСтрокуЛога("Попытка получить список объектов измененных поставщиком!");
	Если Запуск1С.СравнитьКонфигурации(ФайлОтчета, ТипПервойКонфигурации, ТипВторойКонфигурации, ДопКлючПервойКонфигурации, ДопКлючВторойКонфигурации) = Ложь Тогда			
			БылиОшибки = Истина;		
			Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);		
		Иначе		
			Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	КонецЕсли;

КонецЕсли;

//Проверяем есть ли объекты удаленные поставщиком
Если Не БылиОшибки Тогда
	
	тзОбъектыИзмененныеПоставщиком = Запуск1С.ПолучитьТЗОбъектовИзОтчетаСравнения(ФайлОтчета);

	Текст = Новый ТекстовыйДокумент();		
	Для каждого СтрокаПоставщика Из тзОбъектыИзмененныеПоставщиком Цикл
		Если СтрокаПоставщика.ТипИзменения = "ТолькоВПервой" Тогда
			Сообщить("Объект " + СтрокаПоставщика.Объект + ", тип изменения - """ + СтрокаПоставщика.ТипИзменения + """");
			Текст.ДобавитьСтроку(СтрокаПоставщика.Объект);	
		КонецЕсли;
	КонецЦикла;
	Если Текст.КоличествоСтрок() > 0 Тогда
		Сообщить("Внимание!Есть объекты удаленные поставщиком!!! Список объектов сохранен в файле " + ПутьКФайлам + "ОбъектыУдаленныеПоставщиком.txt");
		Текст.Записать(ПутьКФайлам + "ОбъектыУдаленныеПоставщиком.txt");
	КонецЕсли;

КонецЕсли;

//Создание файла списка объектов
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка создания файла списка измененных объектов поставщиком, для захвата в хранилище!");
	ФайлСпискаОбъектов = ПутьКФайлам + СтруктураПараметров["ФайлСпискаОбъектовИзмененныхПоставщиком"];	
	Если Не Запуск1С.СоздатьФайлСпискаОбъектов(ФайлОтчета, ФайлСпискаОбъектов) = Неопределено Тогда		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");				
	Иначе		
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);				
		БылиОшибки = Истина;		
	КонецЕсли;
КонецЕсли;

//Создадим файл настроек объединения, где не выбран ни один объект, для обновления конфигурации поставщика с целью получения списка дважды измененных объектов.
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка получить список дважды измененных объектов.");
	Логирование.УвеличитьУровень();
	Логирование.ЗаписатьСтрокуЛога("Попытка создать файл настроек объединения.");
	ФайлНастроекОбъединения = Запуск1С.СоздатьФайлНастроекОбъединения(ПутьКФайлам, СтруктураПараметров["НаименованиеКонфигурации"]);
	Если ФайлНастроекОбъединения = Неопределено Тогда
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось получить список, " + Запуск1С.ТекстОшибки);		
		БылиОшибки = Истина;
	Иначе
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	КонецЕсли;
КонецЕсли;

// Захват объектов в хранилище
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка захвата объектов в разработочном хранилище.");
	Если Не БылиОшибки И Запуск1С.ЗахватитьВХранилище(ФайлСпискаОбъектов) Тогда		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");	
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось получить список, " + Запуск1С.ТекстОшибки);			
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

//Обновим конфигурацию поставщика и получим файл со списком дважды измененных объектов.
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка обновить конфигурацию поставщика в Разработочной базе, база " + ПараметрыЗапуска.ИмяБазы + ".");
	ФайлДваждыИзмененныеОбъекты = ПутьКФайлам + "ДваждыИзмененные.txt";
	Если Запуск1С.ОбновитьКонфигурациюИзФайлаКонфигурацииПоставщика(ПутьКНовойКонфигурацииПоставщика, ФайлНастроекОбъединения, ФайлДваждыИзмененныеОбъекты) Тогда
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");		
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось получить список, " + Запуск1С.ТекстОшибки);			
		БылиОшибки = Истина;	
	КонецЕсли;
КонецЕсли;

// Отмена захвата объектов в хранилище
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка отменить захват объектов в разработочном хранилище.");
	Если Не БылиОшибки И Запуск1С.ОтменитьЗахватВХранилище(ФайлСпискаОбъектов) Тогда		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");	
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось получить список, " + Запуск1С.ТекстОшибки);			
		БылиОшибки = Истина;
	КонецЕсли;
КонецЕсли;

//Сообщим об успешном создании списка дважды измененных
Если Не БылиОшибки Тогда
	Логирование.УменьшитьУровень();
	Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");
КонецЕсли;

// Захват объектов в хранилище
Если Не БылиОшибки Тогда
	Логирование.ЗаписатьСтрокуЛога("Попытка захвата объектов в разработочном хранилище.");
	Если Не БылиОшибки И Запуск1С.ЗахватитьВХранилище(ФайлСпискаОбъектов) Тогда		
		Логирование.ЗаписатьСтрокуЛога("УСПЕШНО!");	
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: " + Запуск1С.ТекстОшибки);			
		БылиОшибки = Истина; 
	КонецЕсли;
КонецЕсли;

//Откроем конфигуратор
Если Не БылиОшибки Тогда
	Запуск1С.ЗапуститьКонфигуратор();
КонецЕсли;

// Сделаем записть о завершении выполнения основного задания
Логирование.ЗаписатьСтрокуЛога();
Логирование.ЗаписатьСтрокуЛога("Результат выполнения задания: " + ?(БылиОшибки,"БЫЛИ ОШИБКИ","УСПЕШНОЕ ВЫПОЛНЕНИЕ"));
Логирование.ЗаписатьСтрокуЛога();
Логирование.УменьшитьУровень();
Логирование.ЗаписатьСтрокуЛога("Завершение выполнения задания """ + ИдентификаторЗадания + """", -1);

// Отправляем эклектронное сообщение с файлом лога во вложении
Если ЗначениеЗаполнено(УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP) Тогда
	
	СтруктураСообщения = УправлениеЭП.СтруктураСообщения;
	Если БылиОшибки Тогда
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриОшибке;
	Иначе
		СтруктураСообщения.ТемаСообщения = ТемаСообщенияПриУспехе;
	КонецЕсли;	
	СтруктураСообщения.ТекстСообщения = СтруктураСообщения.ТемаСообщения;
	
	// Часть имеющегося лога добавим в письмо
	ИмяВременногоФайла = ФайловыеОперации.СкопироватьФайл(Логирование.ИмяФайлаЛога);
	СтруктураСообщения.Вложения = ИмяВременногоФайла;
	
	// Отправим сообщение
	Логирование.ЗаписатьСтрокуЛога();
	Логирование.ЗаписатьСтрокуЛога("Попытка отправки электронного сообщения:");
	КопироватьФайл(Логирование.ИмяФайлаЛога,ПолучитьИмяВременногоФайла("txt"));
	Если УправлениеЭП.ОтправитьСообщение() Тогда
		Логирование.ЗаписатьСтрокуЛога("Отправлено электорнное сообщение на адреса: " + СтруктураСообщения.АдресЭлектроннойПочтыПолучателя);
	Иначе
		Логирование.ЗаписатьСтрокуЛога("ОШИБКА: Не удалось отправить электронное сообщение с smtp-сервера: " + УправлениеЭП.УчетнаяЗаписьЭП.АдресSMTP);
		Логирование.ЗаписатьСтрокуЛога("	по причине " + УправлениеЭП.ТекстОшибки);
		БылиОшибки = Истина;
	КонецЕсли;
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецЕсли;

Если БылиОшибки Тогда
	ЗавершитьРаботуСПаузой();
КонецЕсли;
